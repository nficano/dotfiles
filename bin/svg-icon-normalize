#!/usr/bin/env bash
#/ Normalize SVG icons by removing fixed size and optional fill attributes.
#/
#/ Usage: $(basename "$0") [-h] [-v] [--current-color] [--responsive] path...
#/
#/ Available options:
#/    -h, --help          Print this help and exit
#/    -v, --verbose       Enable verbose output (enables xtrace)
#/        --current-color Strip fill attributes and set fill="currentColor"
#/        --responsive    Remove width/height and add viewBox from original size
#/
#/ Details:
#/    Accepts individual SVG files or directories that will be scanned recursively.

set -Eeuo pipefail
trap script.cleanup SIGINT SIGTERM ERR EXIT

source "$(dirname "$0")/../lib/bash/initrc"

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

verbose=0
current_color=0
responsive=0
declare -a targets=()

parse_args() {
  targets=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h|--help)
        script.usage
        ;;
      -v|--verbose)
        verbose=1
        ;;
      -cc|--current-color)
        current_color=1
        ;;
      -r|--responsive)
        responsive=1
        ;;
      --)
        shift
        break
        ;;
      --*)
        log.error "Unknown option: $1"
        script.usage 1
        ;;
      *)
        break
        ;;
    esac
    shift
  done

  while [[ $# -gt 0 ]]; do
    targets+=("$1")
    shift
  done

  if (( ${#targets[@]} == 0 )); then
    log.error "Provide at least one SVG file or directory"
    script.usage 1
  fi
}

ensure_tools() {
  if ! command -v sed >/dev/null 2>&1; then
    log.error "sed command not found"
    exit 1
  fi
}

normalize_svg() {
  local file="$1"
  local width="" height=""

  if (( responsive )); then
    width=$(grep -oP '(?<=width=")[^"]+' "$file" || true)
    height=$(grep -oP '(?<=height=")[^"]+' "$file" || true)
    sed -i '' -E 's/(width|height)="[^"]*"//g' "$file"
  fi

  if (( current_color )); then
    sed -i '' -E 's/fill="[^"]*"//g' "$file"
  fi

  local additions=""
  if (( responsive )) && [[ -n "$width" && -n "$height" ]]; then
    additions+=" viewBox=\"0 0 $width $height\""
  fi
  if (( current_color )); then
    additions+=" fill=\"currentColor\""
  fi

  if [[ -n "$additions" ]]; then
    sed -i '' -E "s|<svg|<svg${additions}|" "$file"
  fi

  (( verbose )) && log.info "Normalized: $file"
}

process_target() {
  local path="$1"
  if [[ -d "$path" ]]; then
    while IFS= read -r -d '' svg; do
      normalize_svg "$svg"
    done < <(find "$path" -type f -name '*.svg' -print0)
  elif [[ -f "$path" ]]; then
    if [[ "$path" == *.svg ]]; then
      normalize_svg "$path"
    else
      log.warn "Skipping non-SVG file: $path"
    fi
  else
    log.warn "Path not found: $path"
  fi
}

main() {
  (( verbose )) && set -x
  ensure_tools
  local item
  for item in "${targets[@]}"; do
    process_target "$item"
  done
  log.info "SVG normalization complete"
}

parse_args "$@"
main

#!/usr/bin/env bash
#/ Converts from pixels to em
#/
#/ Usage: $(basename "$0") [OPTIONS] <pixels>
#/
#/ Options:
#/   -h, --help          Show help
#/   -f, --font-size     Font size in pixels (default: 16)

usage() {
    grep '^#/' < "$0" | cut -c4-
    exit 1
}

font_size=16

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            ;;
        -f|--font-size)
            font_size="$2"
            shift 2
            ;;
        -*)
            echo "Unknown option $1"
            usage
            ;;
        *)
            px_value="$1"
            shift
            ;;
    esac
done

# Ensure px_value is provided
[ -z "$px_value" ] && usage

# Strip 'px' if present and convert to integer
px_value=$(echo "$px_value" | sed 's/px$//')
px_value=$((px_value))

# Validate that px_value is a number
if ! [[ "$px_value" =~ ^[0-9]+$ ]]; then
    echo "Error: '$px_value' is not a valid number"
    exit 1
fi

# Calculate em value with higher precision
em_value=$(echo "scale=10; $px_value / $font_size" | bc)

# Round to nearest 0.05 (so we get .0 or .5 endings)
em_value=$(echo "scale=2; ($em_value * 20 + 0.5) / 20" | bc)

# Remove trailing zeros and decimal point if it's a whole number
if [[ "$em_value" == *".00" ]]; then
    em_value=${em_value%.00}
elif [[ "$em_value" == *".0" ]]; then
    em_value=${em_value%.0}
fi

# Handle exact whole numbers (like 16/16 = 1.0)
if (( $(echo "$px_value % $font_size == 0" | bc) )); then
    em_value=$((px_value / font_size))
fi

# Copy to clipboard
echo "${em_value}em" | tr -d '[:space:]' | pbcopy

# Output result
echo "$px_value pixels = $em_value em (based on a font-size of $font_size pixels)"

#!/bin/bash
#/ A safe, hassle-free rebasing workflow.
#/
#/ DESCRIPTION:
#/   This script creates a safe rebase workflow by creating a temporary branch
#/   for the rebase operation, allowing you to test the rebase before applying
#/   it to your original branch.
#/
#/ HOW IT WORKS:
#/   1. Creates a new branch with timestamp (e.g., my-branch.rebase@1234567890)
#/   2. Performs an interactive rebase onto the target branch using patience
#/      diff algorithm.
#/      See: <https://blog.jcoglan.com/2017/09/19/the-patience-diff-algorithm/>
#/   3. If successful, offers to merge the rebased changes back to the original
#/      branch.
#/   4. Handles merge conflicts and provides guidance for resolution
#/
#/ REBASE COMMAND:
#/   - git rebase --autostash --rebase-merges -X patience:
#/       --autostash: Automatically stashes uncommitted changes before rebase
#/       --rebase-merges: Preserves merge commits during rebase
#/       -X patience: Uses patience diff algorithm for better conflict resolution
#/
#/ USAGE:
#/    git-safe-rebase <target-branch>

set -o errexit          # Exit on most errors (see the manual)
set -o nounset          # Disallow expansion of unset variables
#set -o errtrace        # Make sure any error trap is inherited (BASH only)
#set -o pipefail        # Use last non-zero exit code in a pipeline (BASH only)
#set -o xtrace          # Trace the execution of the script (UNCOMMENT TO DEBUG)

source "$(dirname "$0")/../lib/bash/utils"

usage () {
    grep '^#/' < "$0" | cut -c4-
    exit 1
}

[ $# -eq 0 ] || [ "$1" = "--help" ] || [ $# -ne 1 ] && usage

# Get current branch name
CURRENT_BRANCH=$(git branch --show-current)
if [ -z "$CURRENT_BRANCH" ]; then
    log.error "Not on any branch (detached HEAD state)"
    exit 1
fi

# Create new branch name with timestamp
TIMESTAMP=$(date +%s)
REBASE_BRANCH="${CURRENT_BRANCH}.rebase@${TIMESTAMP}"

log.info "Current branch: $CURRENT_BRANCH"
log.info "Creating rebase branch: $REBASE_BRANCH"

# Create and switch to new branch
git checkout -b "$REBASE_BRANCH"

# Perform the rebase
log.info "Starting rebase onto $1..."
if git fetch origin && \
   git rebase --autostash --rebase-merges -X patience "$1"; then
    log.info "Rebase completed successfully!"

    # Prompt to merge back to original branch
    if confirm.yesno "Do you want to switch back to $CURRENT_BRANCH and merge the rebased changes?"; then
        git checkout "$CURRENT_BRANCH"
        if git merge "$REBASE_BRANCH"; then
            log.info "Successfully merged rebased changes into $CURRENT_BRANCH"
            log.info "You can now delete the rebase branch with: git branch -d $REBASE_BRANCH"
        else
            # Check if we're in a merge state and if conflicts are resolved
            if git rev-parse --verify MERGE_HEAD >/dev/null 2>&1; then
                # We're in a merge state, check if there are unresolved conflicts
                if ! git diff --name-only --diff-filter=U | grep -q .; then
                    # No unresolved conflicts found
                    log.warn "Merge conflicts were auto-resolved but merge is not complete"
                    if confirm.yesno "All conflicts appear to be resolved. Commit the merge?"; then
                        git commit --no-edit
                        log.info "Successfully committed the merge into $CURRENT_BRANCH"
                        log.info "You can now delete the rebase branch with: git branch -d $REBASE_BRANCH"
                    else
                        log.info "Merge is staged but not committed. You can run 'git commit' to complete it"
                        log.info "You are currently on branch: $CURRENT_BRANCH"
                    fi
                else
                    log.error "Merge failed with unresolved conflicts. You are on branch: $CURRENT_BRANCH"
                    log.warn "Fix conflicts and run 'git add <files>' then 'git commit' to complete the merge"
                    log.info "Or run 'git merge --abort' to cancel the merge"
                fi
            else
                log.error "Merge failed. You are on branch: $CURRENT_BRANCH"
                log.warn "Check git status for more details"
            fi
        fi
    else
        log.info "Staying on rebase branch: $REBASE_BRANCH"
        log.info "You can manually merge later or delete this branch if not needed"
    fi
else
    log.error "Rebase failed. You are on the rebase branch: $REBASE_BRANCH"
    log.warn "Fix conflicts and run 'git rebase --continue' to continue"
    exit 1
fi

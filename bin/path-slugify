#!/usr/bin/env python3
# Rename files and directories to slug fields.
#
# USAGE:
#    path-slugify [OPTION]... [FILE]...
#
# OPTIONS:
#    -d, --dryrun      preview the new file/folder names
#    -r, --recursive   recursively rename all files and folders
#    -e, --exclude     regex pattern to exclude files/directories from renaming


import argparse
import html
import os
import re
import sys
import unicodedata
from pathlib import Path

QUOTE_PATTERN = re.compile(r"[\']+")
DISALLOWED_UNICODE_CHARS_PATTERN = re.compile(r"[\W_]+")
DUPLICATE_DASH_PATTERN = re.compile(r"-{2,}")
NUMBERS_PATTERN = re.compile(r"(?<=\d),(?=\d)")
DEFAULT_SEPARATOR = "-"


def decamelcase(text: str) -> str:
    if not text:
        return text
    text = re.sub(r"(?<!^)(?<![\s-])(?=[A-Z][a-z])", " ", text)
    text = re.sub(r"([a-z])([A-Z])", r"\1 \2", text)
    return text


def slugify(text: str) -> str:
    text = decamelcase(text)
    text = QUOTE_PATTERN.sub("-", text)
    text = html.unescape(text)
    text = unicodedata.normalize("NFKD", text).lower()
    text = QUOTE_PATTERN.sub("", text)
    text = NUMBERS_PATTERN.sub("", text)
    text = DISALLOWED_UNICODE_CHARS_PATTERN.sub(DEFAULT_SEPARATOR, text)
    return DUPLICATE_DASH_PATTERN.sub(DEFAULT_SEPARATOR, text).strip(
        DEFAULT_SEPARATOR
    )


def should_exclude(item, exclude_pattern=None):
    """Check if an item should be excluded based on the pattern."""
    if exclude_pattern is None:
        return False

    # Check if the item name matches the exclude pattern
    if exclude_pattern.search(item.name):
        return True

    # Check if any part of the path matches the exclude pattern
    for part in item.parts:
        if exclude_pattern.search(part):
            return True

    return False


def process_path(path, dry_run=False, recursive=False, exclude_pattern=None):
    path = Path(path)
    if not path.exists():
        print(f"Error: Path '{path}' does not exist", file=sys.stderr)
        return

    def rename_item(item):
        # Skip if item should be excluded
        if should_exclude(item, exclude_pattern):
            if dry_run:
                print(f"Skipping (excluded): {item}")
            return

        parent = item.parent
        name = item.name
        if item.is_file():
            name, ext = os.path.splitext(name)
            new_name = slugify(name) + ext
        else:
            new_name = slugify(name)
        new_path = parent / new_name
        if new_path == item:
            return
        if dry_run:
            print(f"{item} → {new_path}")
        else:
            try:
                item.rename(new_path)
                print(f"{item} → {new_path}")
            except Exception as e:
                print(f"Error renaming {item}: {e}", file=sys.stderr)

    if recursive:
        items = (i for i in path.rglob("*") if not i.name.startswith("."))
        print("Preview of changes that would be made:")
        print("-" * 50)
        for item in items:
            rename_item(item)
        print("-" * 50)

        if (
            input("Do you want to proceed with these changes? [y/N] ").lower()
            != "y"
        ):
            print("Operation cancelled.")
            return

        for item in (i for i in path.rglob("*") if not i.name.startswith(".")):
            rename_item(item)
    else:
        if path.name.startswith("."):
            print(f"Skipping hidden file/directory: {path}")
            return
        rename_item(path)


def main():
    parser = argparse.ArgumentParser(
        description="Rename files and directories to URL-friendly slugs."
    )
    parser.add_argument("path", help="Path to the file or directory to rename")
    parser.add_argument(
        "-d",
        "--dryrun",
        action="store_true",
        help="Show what would be renamed without actually renaming",
    )
    parser.add_argument(
        "-r",
        "--recursive",
        action="store_true",
        help=(
            "Recursively rename all files and directories (will show preview and "
            "prompt for confirmation)"
        ),
    )
    parser.add_argument(
        "-e",
        "--exclude",
        help="Regex pattern to exclude files/directories from renaming",
    )
    args = parser.parse_args()

    # Compile the exclude pattern if provided
    exclude_pattern = None
    if args.exclude:
        try:
            exclude_pattern = re.compile(args.exclude)
        except re.error as e:
            print(
                f"Error: Invalid regex pattern '{args.exclude}': {e}",
                file=sys.stderr,
            )
            sys.exit(1)

    process_path(args.path, args.dryrun, args.recursive, exclude_pattern)


if __name__ == "__main__":
    main()

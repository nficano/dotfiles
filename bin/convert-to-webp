#!/usr/bin/env bash
#/ Convert an image or animation into WebP format.
#/
#/ Usage: $(basename "$0") [-h] [-v] <input-file>
#/
#/ Available options:
#/    -h, --help      Print this help and exit
#/    -v, --verbose   Enable verbose output
#/
#/ Details:
#/    Handles common still formats (png, jpg, heic, etc.) and animations (gif, video).

set -Eeuo pipefail
trap script.cleanup SIGINT SIGTERM ERR EXIT

source "$(dirname "$0")/../lib/bash/initrc"

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

verbose=0
declare -a positional=()
declare -a ffmpeg_args=()

parse_args() {
  positional=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h|--help)
        script.usage
        ;;
      -v|--verbose)
        verbose=1
        ;;
      --)
        shift
        break
        ;;
      --*)
        log.error "Unknown option: $1"
        script.usage 1
        ;;
      *)
        break
        ;;
    esac
    shift
  done

  while [[ $# -gt 0 ]]; do
    positional+=("$1")
    shift
  done

  if (( ${#positional[@]} != 1 )); then
    log.error "Expected exactly one input file"
    script.usage 1
  fi
}

ensure_dependencies() {
  if ! require.cmd ffmpeg; then
    log.error "ffmpeg is required"
    exit 1
  fi
}

lowercase_extension() {
  local filename="$1"
  local ext="${filename##*.}"
  if [[ "$filename" == "$ext" ]]; then
    echo ""
  else
    echo "$ext" | tr '[:upper:]' '[:lower:]'
  fi
}

build_ffmpeg_args() {
  local ext="$1"
  ffmpeg_args=()

  case "$ext" in
    png|jpg|jpeg|bmp|tif|tiff|heic|heif|raw|ppm|pgm|pnm)
      ffmpeg_args=(-c:v libwebp -lossless 0 -quality 85 -compression_level 6)
      ;;
    svg)
      ffmpeg_args=(-c:v libwebp -lossless 0 -quality 85 -compression_level 6)
      ;;
    gif)
      ffmpeg_args=(
        -vf "fps=15,scale=trunc(iw/2)*2:trunc(ih/2)*2"
        -c:v libwebp
        -lossless 0
        -quality 80
        -compression_level 6
        -loop 0
        -an
      )
      ;;
    mp4|mov|mkv|webm|avi|m4v|mpg|mpeg|3gp|ts|m2ts|ogv)
      ffmpeg_args=(
        -vf "fps=15,scale=trunc(iw/2)*2:trunc(ih/2)*2"
        -c:v libwebp
        -lossless 0
        -quality 80
        -compression_level 6
        -loop 0
        -an
      )
      ;;
    webp)
      ffmpeg_args=()
      ;;
    *)
      log.error "Unsupported input extension: .$ext"
      exit 1
      ;;
  esac
}

main() {
  parse_args "$@"
  ensure_dependencies

  local input_file="${positional[0]}"

  if [[ ! -f "$input_file" ]]; then
    log.error "Input file not found: $input_file"
    exit 1
  fi

  local ext
  ext=$(lowercase_extension "$input_file")

  if [[ -z "$ext" ]]; then
    log.error "Input file must have an extension"
    exit 1
  fi

  if [[ "$ext" == "webp" ]]; then
    log.warn "Input is already a WebP file"
    exit 0
  fi

  build_ffmpeg_args "$ext"

  local output_file="${input_file%.*}.webp"

  if [[ -e "$output_file" ]]; then
    log.error "Output file already exists: $output_file"
    exit 1
  fi

  local ffmpeg_loglevel="error"
  (( verbose )) && ffmpeg_loglevel="info"

  log.info "Converting $input_file -> $output_file"

  ffmpeg -hide_banner -loglevel "$ffmpeg_loglevel" -y -i "$input_file" "${ffmpeg_args[@]}" "$output_file"

  log.info "Conversion complete"
}

main "$@"

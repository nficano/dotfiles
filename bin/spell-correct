#!/usr/bin/env bash
#/ Fixes word spelling using ChatGPT and copies the correction to the clipboard
#/
#/ Usage: $(basename "$0") [-h] [-v] <typo>
#/
#/ Available options:
#/    -h, --help      Print this help and exit
#/    -v, --verbose   Enable verbose output
#/
#/ Examples:
#/    $(basename "$0")
#/    $(basename "$0") exspecally

set -Eeuo pipefail
trap script.cleanup SIGINT SIGTERM EXIT

source "$(dirname "$0")/../lib/bash/initrc"
ERR_STRATEGY=exit

verbose=0
declare -a args=()

parse_args() {
  local remaining
  remaining=$(script.parse_common "$@")

  if [[ -n $remaining ]]; then
    read -r -a args <<<"$remaining"
  else
    args=()
  fi

  if ((${#args[@]} == 0)); then
    exception.raise ValueError "Text to correct is required (pass words or run with --help)"
  fi
}

main() {
  local model="${SPELL_CORRECT_OPENAI_MODEL:-gpt-4o-mini}"
  local agent="${SPELL_CORRECT_OPENAI_AGENT:-spell-check}"

  guards.require_exec curl
  guards.require_exec jq
  if os.platform.is_darwin; then
    guards.require_exec pbcopy
  else
    guards.require_exec xclip
  fi

  local api_key
  api_key=$(ai.openai_api_key)
  if [[ -z $api_key ]]; then
    exception.raise PermissionError "OPENAI_API_KEY is not set"
  fi

  if ! ai.agent_exists "$agent"; then
    exception.raise LookupError "Unknown AI agent: $agent"
  fi

  local api_base
  api_base=$(ai.openai_api_base)

  ((verbose)) && log.info "Using model $model via ${api_base} (agent: $agent)"

  local text=""
  if ((${#args[@]})); then
    printf -v text '%s ' "${args[@]}"
    text=${text% }
  fi

  ((verbose)) && log.info "Correcting: $text"

  local payload correction temperature
  temperature="${SPELL_CORRECT_OPENAI_TEMPERATURE:-0}"

  payload=$(exception.wrap RuntimeError "Failed to build OpenAI payload" -- ai.openai_agent_chat_payload "$model" "$agent" "$text" "$temperature")

  ((verbose)) && log.info "Requesting spell correction from OpenAI"

  if ! ai.openai_chat_completion spell_response "$payload"; then
    ai.openai_log_error spell_response "Failed to contact OpenAI API"
    exception.raise ConnectionError "Failed to contact OpenAI API"
  fi

  if ! http.response_ok spell_response; then
    ai.openai_log_error spell_response "OpenAI API request failed"
    exception.raise RuntimeError "OpenAI API request failed"
  fi

  if ! correction=$(ai.openai_message_text spell_response); then
    exception.raise ValueError "Unable to parse OpenAI response"
  fi

  correction=$(str.trim "$correction")
  if [[ -z $correction ]]; then
    exception.raise ValueError "No correction returned by OpenAI"
  fi

  ((verbose)) && log.info "Correction: $correction"

  if ! printf '%s' "$correction" | clip.copy; then
    exception.raise OSError "Failed to copy correction to clipboard"
  fi

  printf 'Copied correction "%s" to the clipboard\n' "$correction"
}

parse_args "$@"
main

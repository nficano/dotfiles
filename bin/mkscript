#!/usr/bin/env bash
#/ Create a new script from a predefined skeleton.
#/
#/ Usage: $(basename "$0") [-h] [-v] [-y]
#/
#/ Available options:
#/    -h, --help      Print this help and exit
#/    -v, --verbose   Enable verbose output
#/    -y, --yes       Assume "yes" for prompts
#/
#/ Examples:
#/    $(basename "$0")
#/    $(basename "$0") --yes

set -Eeuo pipefail
trap script.cleanup SIGINT SIGTERM ERR EXIT
source "$(dirname "$0")/../lib/bash/utils"

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

verbose=0
assume_yes=0

show_help() {
  grep '^#/' < "${BASH_SOURCE[0]}" | cut -c4-
  echo
  select_template 1
}

select_template() {
  local show_list="${1:-0}"
  local templates=(
    'noargs:No-args script'
    'args:Positional arguments script'
    'params-args:Flags, parameter, and args script'
    'cron-safe:Cron-safe job with locking'
    'fileproc:File or stdin batch processor'
    'net:HTTP/API request script'
    'parallel:Bounded parallel runner'
    'daemon:Interval daemon loop'
    'interactive:Interactive prompt script'
  )

  if [[ "$show_list" == "1" ]]; then
    printf 'Available skeletons:\n'
    local index=1
    local entry
    for entry in "${templates[@]}"; do
      local key="${entry%%:*}"
      local label="${entry#*:}"
      printf '  %d) %-13s %s\n' "$index" "$key" "$label"
      index=$((index + 1))
    done
    return
  fi

  while :; do
    local choice
    read -r -p 'Select a template by number or name: ' choice || choice=""

    if [[ -z "$choice" ]]; then
      [[ ${templates[0]-} ]] && printf '%s' "${templates[0]%%:*}" && return
      log.error 'Invalid selection.'
      continue
    fi

    if [[ "$choice" =~ ^[0-9]+$ ]]; then
      local idx=$((choice - 1))
      if (( idx >= 0 && idx < ${#templates[@]} )); then
        printf '%s' "${templates[idx]%%:*}"
        return
      fi
    else
      for entry in "${templates[@]}"; do
        local key="${entry%%:*}"
        if [[ "$choice" == "$key" ]]; then
          printf '%s' "$key"
          return
        fi
      done
    fi

    log.error 'Invalid selection. Try again.'
  done
}

parse_args() {
  local opt
  local -a transformed=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --help) transformed+=('-h') ;;
      --verbose) transformed+=('-v') ;;
      --yes) transformed+=('-y') ;;
      --)
        shift
        break
        ;;
      --*)
        log.error "Unknown option: $1"
        script.usage 1
        ;;
      *)
        break
        ;;
    esac
    shift
  done

  transformed+=("$@")
  set -- "${transformed[@]}"

  while getopts ':hvy' opt; do
    case "$opt" in
      h)
        show_help
        exit 0
        ;;
      v) verbose=1 ;;
      y) assume_yes=1 ;;
      \?) log.error "Invalid option: -$OPTARG"; script.usage 1 ;;
    esac
  done

  shift $((OPTIND - 1))

  if [[ $# -gt 0 ]]; then
    log.error "Unexpected positional arguments"
    script.usage 1
  fi
}

render_script() {
  local template="$1"
  local target="$2"
  local description="$3"

  local skeleton_dir="$script_dir/../skel/bash"
  local skeleton_path="$skeleton_dir/${template}"

  if [[ ! -f "$skeleton_path" ]]; then
    log.error "Skeleton not found: $template"
    return 1
  fi

  local escaped="$description"
  escaped="${escaped//\\/\\\\}"
  escaped="${escaped//&/\\&}"
  escaped="${escaped//\//\/}"

  sed "s/{{ description }}/$escaped/g" "$skeleton_path" > "$target"
}

main() {
  parse_args "$@"

  # Show available templates
  select_template 1
  echo

  local template
  template=$(select_template)
  log.info "Selected skeleton: $template"

  local script_name
  script_name=$(prompt.read_required 'Script name (kebab-case)')

  if [[ ! $script_name =~ ^[a-z0-9]+(-[a-z0-9]+)*(.sh)?$ ]]; then
    log.error "Script name must be kebab-case (letters, numbers, hyphen)."
    exit 1
  fi

  local destination_dir
  destination_dir="$script_dir"

  local description
  description=$(prompt.read_required 'Short description')

  if [[ $script_name != *.sh ]]; then
    script_name="${script_name}"
  fi

  local target_path
  target_path="${destination_dir%/}/$script_name"

  fs.mkcd "${destination_dir%/}"

  if [[ -e "$target_path" ]]; then
    if ! prompt.ask_yes_no "File exists at $target_path. Overwrite?" "$assume_yes" 0 "$verbose"; then
      log.warn "Aborting"
      exit 1
    fi
  fi

  render_script "$template" "$target_path" "$description"

  chmod +x -- "$target_path"
  log.info "Created $target_path"

  if [[ -n "${EDITOR:-}" ]]; then
    log.info "Opening $target_path in $EDITOR"
    $EDITOR "$target_path"
  else
    log.warn "EDITOR environment variable not set, cannot open file"
  fi
}

main "$@"

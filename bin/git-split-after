#!/usr/bin/env bash
# Usage: $(basename "$0") [-h] -b BRANCH_NAME -u UNTIL_HASH
#
# git-split-after: Move commits to a new branch and revert them from current branch
#
# Options:
#   -h              Show help
#   -b BRANCH_NAME  Name of the new branch to create
#   -u UNTIL_HASH   Git hash to stop at (exclusive - changes up to but not including this hash)
#
# Example: git-split-after -b feature-branch -u abc1234

usage() {
  grep '^# ' "$0" | cut -c3-
  exit 1
}

branch_name=""
until_hash=""

while getopts "hb:u:" opt; do
  case "$opt" in
  h) usage ;;
  b) branch_name="$OPTARG" ;;
  u) until_hash="$OPTARG" ;;
  *) usage ;;
  esac
done
shift $((OPTIND - 1))

# Ensure required parameters are provided
[ -z "$branch_name" ] && {
  echo "Error: Branch name (-b) is required"
  usage
}
[ -z "$until_hash" ] && {
  echo "Error: Until hash (-u) is required"
  usage
}

# Validate we're in a git repository
if ! git rev-parse --git-dir >/dev/null 2>&1; then
  echo "Error: Not in a git repository"
  exit 1
fi

# Validate the until_hash exists
if ! git rev-parse --verify "$until_hash" >/dev/null 2>&1; then
  echo "Error: Hash '$until_hash' does not exist"
  exit 1
fi

# Get current branch name
current_branch=$(git branch --show-current)
if [ -z "$current_branch" ]; then
  echo "Error: Not on a branch (detached HEAD?)"
  exit 1
fi

# Check if target branch already exists
if git branch --list "$branch_name" | grep -q "$branch_name"; then
  echo "Error: Branch '$branch_name' already exists"
  exit 1
fi

# Get list of commits from HEAD to until_hash (exclusive)
commits=$(git rev-list --reverse "$until_hash..HEAD")
if [ -z "$commits" ]; then
  echo "No commits found between $until_hash and HEAD"
  exit 0
fi

echo "Moving the following commits to branch '$branch_name':"
git log --oneline "$until_hash..HEAD"
echo

# Create and switch to new branch
echo "Creating new branch '$branch_name'..."
git checkout -b "$branch_name"

# Switch back to original branch
echo "Switching back to '$current_branch'..."
git checkout "$current_branch"

# Create a new commit that reverts all changes back to until_hash state
echo "Creating revert commit to restore state to $until_hash..."

# Get the tree state from until_hash and create a new commit with it
tree_hash=$(git rev-parse "$until_hash^{tree}")
commit_message="Revert changes back to $(git log --oneline -1 $until_hash)

Moved commits to branch '$branch_name':
$(git log --oneline "$until_hash..HEAD")"

# Create new commit with the tree state from until_hash
new_commit=$(git commit-tree "$tree_hash" -p HEAD -m "$commit_message")
git reset --hard "$new_commit"

echo "âœ… Successfully moved commits to '$branch_name' and created revert commit"
echo "Current branch '$current_branch' now points to: $(git log --oneline -1)"
echo "New branch '$branch_name' contains the moved commits"

#!/usr/bin/env bash
#/ Show a filtered, formatted, and sorted process list.
#/
#/ Usage: $(basename "$0") [-h] [-v] [-f] -p param_value arg1 [arg2...]
#/
#/ Available options:
#/    -h, --help      Print this help and exit
#/    -v, --verbose   Enable verbose output
#/    -f, --flag      Toggle example flag behavior
#/    -p, --param     Required parameter value
#/
#/ Examples:
#/    $(basename "$0") --help
#/    $(basename "$0") -p value arg1 arg2

set -Eeuo pipefail
trap script.cleanup SIGINT SIGTERM ERR EXIT

source "$(dirname "$0")/../lib/bash/initrc"

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

verbose=0
flag=0
param=""
declare -a args=()

parse_args() {
  local opt
  local -a transformed=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --help) transformed+=('-h') ;;
      --verbose) transformed+=('-v') ;;
      --flag) transformed+=('-f') ;;
      --param)
        [[ $# -gt 1 ]] || { log.error "--param requires a value"; script.usage 1; }
        transformed+=('-p' "$2")
        shift
        ;;
      --param=*)
        transformed+=('-p' "${1#*=}")
        ;;
      --)
        shift
        break
        ;;
      --*)
        log.error "Unknown option: $1"
        script.usage 1
        ;;
      *)
        break
        ;;
    esac
    shift
  done

  transformed+=("$@")
  set -- "${transformed[@]}"

  while getopts ':hvfp:' opt; do
    case "$opt" in
      h) script.usage ;;
      v) verbose=1 ;;
      f) flag=1 ;;
      p) param="$OPTARG" ;;
      :) log.error "Option -$OPTARG requires an argument"; script.usage 1 ;;
      \?) log.error "Invalid option: -$OPTARG"; script.usage 1 ;;
    esac
  done

  shift $((OPTIND - 1))
  args=("$@")

  if [[ -z "$param" ]]; then
    log.error "Missing required option --param"
    script.usage 1
  fi

  if [[ ${#args[@]} -eq 0 ]]; then
    log.error "Missing required positional arguments"
    script.usage 1
  fi
}

main() {
  (( verbose )) && log.info "Verbose mode enabled"

  log.info "Flag set: $flag"
  log.info "Param value: $param"
  log.info "Arguments: ${args[*]}"
  # TODO: implement script logic
}

parse_args "$@"
main

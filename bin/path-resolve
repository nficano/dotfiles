#!/usr/bin/env bash
#/ Resolve a path (relative or with ~) to an absolute path.
#/
#/ Usage: $(basename "$0") [-h] [-v] <path>
#/
#/ Available options:
#/    -h, --help      Print this help and exit
#/    -v, --verbose   Enable verbose output
#/
#/ Details:
#/    Normalizes the provided path using python's os.path.abspath.

set -Eeuo pipefail
trap script.cleanup SIGINT SIGTERM ERR EXIT

source "$(dirname "$0")/../lib/bash/initrc"

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

verbose=0
declare -a args=()

parse_args() {
  args=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
    -h | --help)
      script.usage
      ;;
    -v | --verbose)
      verbose=1
      ;;
    --)
      shift
      break
      ;;
    --*)
      log.error "Unknown option: $1"
      script.usage 1
      ;;
    *)
      break
      ;;
    esac
    shift
  done

  while [[ $# -gt 0 ]]; do
    args+=("$1")
    shift
  done

  if ((${#args[@]} != 1)); then
    log.error "A single path argument is required"
    script.usage 1
  fi
}

main() {
  if ! require.cmd python3; then
    log.error "python3 is required"
    exit 1
  fi

  local input resolved
  input="${args[0]}"

  resolved=$(python3 "$input" <<'PY')
import os
import sys

print(os.path.abspath(os.path.expanduser(sys.argv[1])))
PY

  ((verbose)) && log.info "Resolved path: $resolved"
  printf '%s\n' "$resolved"
}

parse_args "$@"
main
